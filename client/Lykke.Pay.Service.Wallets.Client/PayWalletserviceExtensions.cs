// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Lykke.Pay.Service.Wallets.Client
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for PayWalletservice.
    /// </summary>
    public static partial class PayWalletserviceExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IsAliveResponse ApiIsAliveGet(this IPayWalletservice operations)
            {
                return operations.ApiIsAliveGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IsAliveResponse> ApiIsAliveGetAsync(this IPayWalletservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiIsAliveGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static void ApiWalletsUpdateCachePost(this IPayWalletservice operations)
            {
                operations.ApiWalletsUpdateCachePostAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiWalletsUpdateCachePostAsync(this IPayWalletservice operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiWalletsUpdateCachePostWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletAddresses'>
            /// </param>
            public static object ApiWalletsPost(this IPayWalletservice operations, IList<string> walletAddresses = default(IList<string>))
            {
                return operations.ApiWalletsPostAsync(walletAddresses).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletAddresses'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiWalletsPostAsync(this IPayWalletservice operations, IList<string> walletAddresses = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWalletsPostWithHttpMessagesAsync(walletAddresses, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletAddress'>
            /// </param>
            public static object ApiWalletsByWalletAddressGet(this IPayWalletservice operations, string walletAddress)
            {
                return operations.ApiWalletsByWalletAddressGetAsync(walletAddress).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='walletAddress'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ApiWalletsByWalletAddressGetAsync(this IPayWalletservice operations, string walletAddress, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiWalletsByWalletAddressGetWithHttpMessagesAsync(walletAddress, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
